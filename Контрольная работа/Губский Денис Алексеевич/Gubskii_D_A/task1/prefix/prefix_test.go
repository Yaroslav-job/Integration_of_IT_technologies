// prefix_test.go
// Модуль для тестирования работы с префиксами
// Автор: Губский Денис Алексеевич
// Лицензия: GPLv3
// История изменений:
// - v 0.1: Создан проект и реализован алгоритм поиска общего префикса.
// - v 0.2: Исправлены ошибки и реализовано тестирование.
// - v 0.3: Добавлены коментарии
// - v 0.4: Добавлены файлы Makefile.

package prefix // Определение пакета prefix для тестирования функций из этого пакета.

import (
	"testing" // Импорт пакета testing для написания тестов.
)

func TestLongestCommonPrefix(t *testing.T) {
	// Определяем набор тестов с входными данными и ожидаемыми результатами.
	tests := []struct {
		input    []string // Входной массив строк.
		expected string   // Ожидаемый результат.
	}{
		{[]string{"flower", "flow", "flight"}, "fl"},                // Пример с общим префиксом "fl".
		{[]string{"dog", "racecar", "car"}, ""},                     // Пример без общего префикса.
		{[]string{"interstellar", "internet", "internal"}, "inter"}, // Общий префикс "inter".
		{[]string{"a"}, "a"},                                        // Пример с одной строкой.
		{[]string{"", "b"}, ""},                                     // Пример с пустой строкой.
		{[]string{"abc", "abc", "abc"}, "abc"},                      // Все строки одинаковые
		// Граничные случаи
		{[]string{}, ""},                                          // Пустой массив
		{nil, ""},                                                 // Nil массив
		{[]string{"", ""}, ""},                                    // Массив из пустых строк
		{[]string{"abc", ""}, ""},                                 // Одна строка пустая
		{[]string{"", "abc"}, ""},                                 // Одна строка пустая (обратный порядок)
		{[]string{"abc", "abcd", "abcde"}, "abc"},                 // Префикс совпадает с первой строкой
		{[]string{"short", "shorter", "shortest"}, "short"},       // Префикс совпадает с самой короткой строкой
		{[]string{"a", "b", "c"}, ""},                             // Нет общего префикса
		{[]string{"prefix", "prefixes", "prefixation"}, "prefix"}, // Префикс совпадает с первой строкой полностью
	}

	// Проходим по каждому тесту.
	for _, test := range tests {
		// Вызываем функцию LongestCommonPrefix с входными данными.
		result := LongestCommonPrefix(test.input)
		// Проверяем, совпадает ли результат с ожидаемым.
		if result != test.expected {
			// Если результат не совпадает, выводим ошибку с подробной информацией.
			t.Errorf("For input %v, expected %q but got %q", test.input, test.expected, result)
		}
	}
}
