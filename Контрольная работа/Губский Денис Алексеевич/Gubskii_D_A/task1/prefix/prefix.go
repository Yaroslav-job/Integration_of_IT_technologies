// prefix.go
// Модуль для работы с префиксами
// Автор: Губский Денис Алексеевич
// Лицензия: GPLv3
// История изменений:
// - v 0.1: Создан проект и реализован алгоритм поиска общего префикса.
// - v 0.2: Исправлены ошибки и реализовано тестирование.
// - v 0.3: Добавлены коментарии
// - v 0.4: Добавлены файлы Makefile.

package prefix // Определение пакета prefix, содержащего логику для работы с префиксами.

// LongestCommonPrefix ищет наибольший общий префикс среди строк в массиве.
func LongestCommonPrefix(strs []string) string {
	// Проверяем, что массив строк не равен nil.
	if strs == nil {
		return ""
	}

	// Если массив строк пустой, возвращаем пустую строку.
	if len(strs) == 0 {
		return ""
	}

	// Проверяем, что все строки в массиве не равны nil.
	for _, str := range strs {
		if str == "" {
			continue // Пустые строки допустимы, но nil недопустимы.
		}
	}

	// Определяем минимальную длину строки в массиве.
	minLen := len(strs[0])     // Изначально минимальная длина равна длине первой строки.
	for _, str := range strs { // Проходим по всем строкам в массиве.
		if len(str) < minLen { // Если длина текущей строки меньше минимальной длины,
			minLen = len(str) // обновляем минимальную длину.
		}
	}

	// Проверяем символы строк на совпадение до минимальной длины.
	for i := 0; i < minLen; i++ { // Проходим по каждому индексу до минимальной длины.
		char := strs[0][i]             // Берем символ из первой строки.
		for _, str := range strs[1:] { // Сравниваем этот символ с соответствующими символами остальных строк.
			if str[i] != char { // Если символы не совпадают,
				return strs[0][:i] // возвращаем префикс до текущего индекса.
			}
		}
	}

	// Если все символы совпадают до минимальной длины, возвращаем префикс этой длины.
	return strs[0][:minLen]
}
