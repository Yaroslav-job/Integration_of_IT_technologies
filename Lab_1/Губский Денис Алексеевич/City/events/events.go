package events

import (
	"fmt"       // –∏–º–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
	"math/rand" // –∏–º–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
	"time"      // –∏–º–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º

	"example.com/City/city" // –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è city
)

var lastFloodTurn int     // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è
var lastBadEventTurn int  // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–æ—Ö–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
var lastGoodEventTurn int // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è

func init() {
	rand.Seed(time.Now().UnixNano()) // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
}

func TriggerEvent(c *city.City, currentTurn int) {
	if c.Happiness <= 0 || c.Treasury <= 0 {
		fmt.Println("========================================")
		fmt.Println("üíÄ –°–æ–±—ã—Ç–∏–µ: –ë—É–Ω—Ç! –ì–æ—Ä–æ–∂–∞–Ω–µ –≤–æ—Å—Å—Ç–∞–ª–∏ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å—á–∞—Å—Ç—å—è –∏–ª–∏ –ø—É—Å—Ç–æ–π –∫–∞–∑–Ω—ã.")
		// –õ–æ–≥–∏–∫–∞ –±—É–Ω—Ç–∞
		c.Residents -= 10              // —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏—Ç–µ–ª–µ–π
		c.Happiness = 0                // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —Å—á–∞—Å—Ç—å—è –≤ 0
		c.Treasury = 0                 // —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–∑–Ω—ã –≤ 0
		lastBadEventTurn = currentTurn // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ –ø–ª–æ—Ö–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
		fmt.Println("========================================")
		fmt.Println("üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! üíÄ")
		c.Residents = 0
		c.Treasury = 0
		return
	}

	event := rand.Intn(8) // —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
	fmt.Println("========================================")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –ø–ª–æ—Ö–∏—Ö –∏ —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
	if event <= 2 && currentTurn-lastBadEventTurn < 4 {
		fmt.Println("========================================")
		return
	}
	if event > 2 && currentTurn-lastGoodEventTurn < 2 {
		fmt.Println("========================================")
		return
	}
	fmt.Println("üìÖ –°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ!")
	switch event {
	case 0:
		fmt.Println("ü¶† –°–æ–±—ã—Ç–∏–µ: –≠–ø–∏–¥–µ–º–∏—è! –ú–Ω–æ–≥–æ –∂–∏—Ç–µ–ª–µ–π —É–º–µ—Ä–ª–æ.")
		deathRate := 0.6
		if c.Buildings["–õ–∞–∑–∞—Ä–µ—Ç"] > 0 {
			deathRate -= 0.3 // —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ 30% –∑–∞ –ø–µ—Ä–≤—ã–π –ª–∞–∑–∞—Ä–µ—Ç
			if c.Buildings["–õ–∞–∑–∞—Ä–µ—Ç"] > 1 {
				deathRate -= 0.1 // —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ 10% –∑–∞ –≤—Ç–æ—Ä–æ–π –ª–∞–∑–∞—Ä–µ—Ç
			}
		}
		if deathRate < 0 {
			deathRate = 0
		}
		deaths := int(c.Residents * deathRate)
		c.Residents *= (1 - deathRate)
		fmt.Printf("–£–º–µ—Ä–ª–æ –∂–∏—Ç–µ–ª–µ–π: %d\n", deaths)
		c.CheckCityLevel()             // –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏—Ç–µ–ª–µ–π
		lastBadEventTurn = currentTurn // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ –ø–ª–æ—Ö–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
	case 1:
		if rand.Float64() > c.DefenseChance || c.Army == 0 {
			fmt.Println("‚öîÔ∏è –°–æ–±—ã—Ç–∏–µ: –í–∞—Ä–≤–∞—Ä—ã –Ω–∞–ø–∞–ª–∏! -1 –∑–¥–∞–Ω–∏–µ, -10% –∂–∏—Ç–µ–ª–µ–π.")
			deaths := int(c.Residents * 0.1)
			warriorDeaths := 0
			if c.Army > 0 {
				warriorDeaths = rand.Intn(c.Army) + 1
				if warriorDeaths > deaths {
					warriorDeaths = deaths
				}
				c.Army -= warriorDeaths
				deaths -= warriorDeaths
			}
			c.Residents *= (1 - float64(deaths)/c.Residents)
			fmt.Printf("–£–º–µ—Ä–ª–æ –∂–∏—Ç–µ–ª–µ–π: %d, –≤–æ–∏–Ω–æ–≤: %d\n", deaths, warriorDeaths)
			c.CheckCityLevel() // –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏—Ç–µ–ª–µ–π
			for building := range c.Buildings {
				if building != "–î–æ–º –í–æ–µ–≤–æ–¥—ã" {
					fmt.Printf("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ –∑–¥–∞–Ω–∏–µ: %s\n", building)
					c.DestroyBuilding(building) // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ DestroyBuilding
					break
				}
			}
			lastBadEventTurn = currentTurn // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ –ø–ª–æ—Ö–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
		} else {
			fmt.Println("‚öîÔ∏è –°–æ–±—ã—Ç–∏–µ: –í–∞—Ä–≤–∞—Ä—ã –Ω–∞–ø–∞–ª–∏, –Ω–æ –±—ã–ª–∏ –æ—Ç–±–∏—Ç—ã!")
			// –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≥–∏–±—à–∏—Ö –≤–æ–∏–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–∞—Ä–≤–∞—Ä–æ–≤
			warriorDeaths := rand.Intn(10) + 1 // —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≥–∏–±—à–∏—Ö –≤–æ–∏–Ω–æ–≤ –æ—Ç 1 –¥–æ 10
			if warriorDeaths > c.Army {
				warriorDeaths = c.Army
			}
			c.Army -= warriorDeaths
			fmt.Printf("–ü–æ–≥–∏–±–ª–æ –≤–æ–∏–Ω–æ–≤: %d\n", warriorDeaths)
		}
		c.UpdateIncome() // –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –≥–∏–±–µ–ª–∏ –≤–æ–∏–Ω–æ–≤
	case 2:
		if currentTurn-lastFloodTurn >= 8 {
			fmt.Println("üåä –°–æ–±—ã—Ç–∏–µ: –ù–∞–≤–æ–¥–Ω–µ–Ω–∏–µ! -1 –∑–¥–∞–Ω–∏–µ.")
			for building := range c.Buildings {
				if building != "–î–æ–º –í–æ–µ–≤–æ–¥—ã" {
					fmt.Printf("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ –∑–¥–∞–Ω–∏–µ: %s\n", building)
					c.DestroyBuilding(building) // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ DestroyBuilding
					break
				}
			}
			lastFloodTurn = currentTurn    // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è
			lastBadEventTurn = currentTurn // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ –ø–ª–æ—Ö–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
		}
	case 3:
		fmt.Println("üåæ –°–æ–±—ã—Ç–∏–µ: –•–æ—Ä–æ—à–∏–π —É—Ä–æ–∂–∞–π! +15-25% –∂–∏—Ç–µ–ª–µ–π.")
		increaseRate := 0.15 + rand.Float64()*0.1
		c.Residents *= (1 + increaseRate)
		c.CheckCityLevel()              // –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∂–∏—Ç–µ–ª–µ–π
		lastGoodEventTurn = currentTurn // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
	case 4:
		fmt.Println("üõçÔ∏è –°–æ–±—ã—Ç–∏–µ: –¢–æ—Ä–≥–æ–≤—Ü—ã –ø—Ä–∏–≤–µ–∑–ª–∏ —Ç–æ–≤–∞—Ä—ã! +10-25% –∑–æ–ª–æ—Ç–∞.")
		increaseRate := 0.1 + rand.Float64()*0.15
		c.Treasury += int(float64(c.Treasury) * increaseRate)
		lastGoodEventTurn = currentTurn // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
	case 5:
		fmt.Println("üèóÔ∏è –°–æ–±—ã—Ç–∏–µ: –°—Ç—Ä–∞–Ω–Ω–∏–∫ –ø–æ—Å—Ç—Ä–æ–∏–ª –∑–¥–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.")
		buildings := []string{"–§–µ—Ä–º–∞", "–†—ã–Ω–æ–∫", "–õ–∞–∑–∞—Ä–µ—Ç", "–¢—Ä–∞–∫—Ç–∏—Ä", "–°—Ç–µ–Ω—ã", "–ë–∞—à–Ω—è", "–®–∞—Ö—Ç–∞", "–ü—Ä–∏—Å—Ç–∞–Ω—å", "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è", "–¶–µ—Ä–∫–æ–≤—å", "–î–æ–º –ª–µ–∫–∞—Ä—è"}
		randomBuilding := buildings[rand.Intn(len(buildings))]
		c.Buildings[randomBuilding]++
		if randomBuilding == "–î–æ–º –ª–µ–∫–∞—Ä—è" {
			c.PopulationGrowth += 1 // —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–µ –¥–æ–º–∞ –ª–µ–∫–∞—Ä—è
		}
		fmt.Printf("–°—Ç—Ä–∞–Ω–Ω–∏–∫ –ø–æ—Å—Ç—Ä–æ–∏–ª: %s\n", randomBuilding)
		lastGoodEventTurn = currentTurn // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
	case 6:
		fmt.Println("üî• –°–æ–±—ã—Ç–∏–µ: –ü–æ–∂–∞—Ä! -1 –∑–¥–∞–Ω–∏–µ, -5% –∂–∏—Ç–µ–ª–µ–π.")
		deaths := int(c.Residents * 0.05)
		c.Residents *= (1 - 0.05)
		fmt.Printf("–£–º–µ—Ä–ª–æ –∂–∏—Ç–µ–ª–µ–π: %d\n", deaths)
		for building := range c.Buildings {
			if building != "–î–æ–º –í–æ–µ–≤–æ–¥—ã" {
				fmt.Printf("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–æ –∑–¥–∞–Ω–∏–µ: %s\n", building)
				c.DestroyBuilding(building) // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ DestroyBuilding
				break
			}
		}
		lastBadEventTurn = currentTurn // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ –ø–ª–æ—Ö–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
	case 7:
		fmt.Println("üéâ –°–æ–±—ã—Ç–∏–µ: –ü—Ä–∞–∑–¥–Ω–∏–∫! +5 —Å—á–∞—Å—Ç—å—è, -10 –∑–æ–ª–æ—Ç–∞.")
		c.Happiness += 5
		if c.Happiness > 10 {
			c.Happiness = 10
		}
		c.Treasury -= 10
		lastGoodEventTurn = currentTurn // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ —Ö–æ—Ä–æ—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è
	c.UpdateIncome()
	c.UpdateLevel()
	c.CheckCityLevel()
	c.UpdateArmy()
	c.UpdatePopulationGrowth()
	c.UpdateDefenseChance() // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –Ω–∞–ø–∞–¥–µ–Ω–∏—è –≤–∞—Ä–≤–∞—Ä–æ–≤
	c.UpdateEpidemicRisk()  // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ —ç–ø–∏–¥–µ–º–∏–π
	c.UpdateFloodRisk()     // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –Ω–∞–≤–æ–¥–Ω–µ–Ω–∏—è

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
	if c.Residents <= 0 {
		fmt.Println("üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—Å–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–≥–∏–±–ª–∏. üíÄ")
		c.Residents = 0
		c.Treasury = 0
	} else if c.Treasury < 0 {
		fmt.Println("üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ö–∞–∑–Ω–∞ –ø—É—Å—Ç–∞. üíÄ")
		c.Residents = 0
		c.Treasury = 0
	}
	fmt.Println("========================================")
}
